			Programming and Data Structures

Programming in C

developed by : Dennis Ritchie
developed at AT Bell laboratries AT&T (American Telephone & Telegraph)
location : USA


c programing language is used for creating system application 
that directly intract with the hardware devices such as driver, kernal etc.


C programing language is base for programming language that's why it is known as mother Language

it can be defined as :

Mother language :
it is modern programming language because most of compilers,JVMs, Kernals, etc are written in C language
Most of the programming language are follow C syntax
for example : C++, c#,java
it provide core concept of  Array, String,funtions,file handling etc.
that is being used in many language like C++, java,C#

system programming language :
A system programming language is used to create the system software.
C language is system programming language 
Because it can be used to low-level programming 
for example : driver  and kernal

procedrue-oriented programming language:
A procedure means function, method,routine,subroutine etc.
A procedural language means 
	1.steps for the program to solve the any issue/program or 
	2.step follow to perform any task
A procedural language break the program into funtions, data structure etc.
C is a procedural language 
In C , variables and function prototypes must be declared before being used

structured programming language
A structured programming language is the subset of procedural language
Structure means -- break and program into parts or blocks
So that it may be easy to understand
here blocks means functions

mid level programming language 
C is  middle-level language beacause it support both feature 
1. low level language
2. high level language

C program converted into assembly code, 
It support pointer airthmetic(it is the feature of low level language)
but it is machine independent (it is the feature of high level language)

c program example 

save as main.c

#include<stdio.h>
int main(){
printf("this is C program");
return 0;
}

Features of c programming language 

Simple 
Portable
Mid level language 
structured programming language
Rich library
Memory Management 
Fast speed
Pointer
Recursion
Extensible

Simple : 
C programming language is Structured programming language 
It follows Structured Approach 
Here Structured Approach means Break the program into parts
Structured Approach means it Contain Set of library and data types etc.

Portable :
C Can be executed in diffrent machines 
Example : if you write a code in your machine it can be Write in any machine without any change in single line 

mid level programming language:
low level language because it is used to develop system applications such as kernal,driver etc.
high level language beacause it is used to support the feature of High level language 

here it means C programming language support both low level as well as high level language feature that is why it is called as mid level language 

Structured Programming language : we have discuss it previously 
Structured progragmming language bacause we can break the prpgram into parts 
using funtions
due to this it is easy to understand and modify the code 
Because Functions are reusable

Rich library :
C provode Lots of inbuild functions that makes developement fast.

Memory Management :
C Programming support dynamic memory allocation
In C we can free the alocated memory at any time by calling free() function.

Speed :
The compilation and Execution time of C is very fast 

Pointer :
C provides a the feature of pointer
We can directly initract with the memory by using pointer.
We can use pointer for memory, structure, funtions, array etc.

Recursion :
when a function call it self within a funtion.
it provides code reusability for every funtion.
Recursion enables us to use the approach for backtracking.

Extensible :
C language is Extensible 
it can easily adopt new features

-------------------------------------------------
First C program 

#include <stdio.h>
int main(){
printf("Hello C language");
return 0;
}

----------------------------------------------------------------------------
Explain this code :

#include <stdio.h>
It is preprocessor directive
it tells the compiler to include the standard input/output library
this library Provides Functions for input and output operation 
such as 
	1.printf
	2.scanf
	
int main(){
This line start the 'main' function
In C Every Program must have 'main' function and execution begins from here 

printf ("Hello C program");
printf is a function used to show the output
it prints the specified string to standard output

return 0;
this is the return statement 
it tells the program to return an exit status to operating system
in case 0 is returned : It indicates that program executed successfully
in case non-zero returned : It indicates diffrent type of error

}
This is closing brace
tells that end of the 'main' funtion 

-----------------------------------------------------------------------------

compilation ?
it is the process of converting the source code into object code 
it is done with the help of compiler
The compiler check the source code for syntactical or structural error
if source code is error free then it generate the object code

---------------------------------Example------------------------------
-----source code ------------------------------> Object code--------------------

#include <stdio.h>				01000000000
int main(){					01111111111
printf("Hello C language");	------->	01010111100
return 0;					00000111101
}						11111111111

-----------------------------------------------------------------------------

the compilation process divided into four steps
	1.pre-processing
	2.compiling
	3.Assembling
	4.Linking

1. pre-processor :A pre-processor takes the source code as a input  and remove all the comments from the source code 
2.pre-processor interpret the code from pre-processor directive
	Example :
	if <stdio.h> directive is available in the program then pre-processor interpret the directive and replace this directive with content of the stdio.h file
	
	
-------------program phases before transformed into executable form -----------
			  Source code	(the source code first goes to 
				|	pre-processor )
				|
				|
				+
			pre-processor	(pre-processor Expend this code)
				|	(Once the code Expended it pass
				|	to compiler)
				|	(Expended code)
				|
				+
			    Compiler	(compiler convert The Expended code 
			    	|	into assembly code)
			    	|
			    	|	(assembly code)
			    	|
			    	+
			    Assembler	(Assembler convert the assembly 
			    	|	code into Object code)
			    	|
			    	|	(Object code)
			    	|
			    	+
   Other object files----+    Linker	+---Libraries
	(The main purpose of Linker is to combine multiple object files 
	and resolve the reference b/w them and create a single executable file)
			    	|
	(The linker resolve the symbols such as function and global,variable)
	(It Ensure that symbol defined once and if not defined linker 
	report "Undefined Reference" error)	
			    	|
	(library inclusion : the linker use the function or code from external
	library in executable file)
				|
			    	+
			    Executable code
			    
-------------------------------------------------------------------------------
After the Executable code is created the loader will load the executable file for execution
-------------program phases before transformed into executable form------------
	(hello.c)	  Source code	(the source code first goes to 
				|	pre-processor )
				|
				|
				+
			pre-processor	(pre-processor Expend this code)
				|	(Once the code Expended it pass
				|	to compiler)
	(hello.i)		|	(Expended code)
				|
				+
			    Compiler	(compiler convert The Expended code 
			    	|	into assembly code)
			    	|
	(hello.s)	    	|	(assembly code)
			    	|
			    	+
			    Assembler	(Assembler convert the assembly 
			    	|	code into Object code)
			    	|
		    	|	(Object code)
			    	|
			    	+
   Other object files----+    Linker	+---Libraries
	(The main purpose of Linker is to combine multiple object files 
	and resolve the reference b/w them and create a single executable file)
			    	|
	(The linker resolve the symbols such as function and global,variable)
	(It Ensure that symbol defined once and if not defined linker 
	report "Undefined Reference" error)	
			    	|
	(library inclusion : the linker use the function or code from external
	library in executable file)
				|
			    	+
	(hello.exe)	    Executable code
			    	|
			    	|
			    	+
			    Loader
			    	|
			    	|
			    	+
			    Execution
-------------------------------------------------------------------------------
printf() & scanf() : these are the functions used to take input and get the output in c language
both are inbuilt in library funtion
library that defined in stdio.h (header file)
-------------------------------------------------------------------------------
printf() : 
used to get the output statement to console
syntax :
printf("format string", argument_list);
format string : 
	1.%d(integer)
	2.%c(character)
	3.%s(string)
	4.%f(float)

scanf() :
used to get read the input data from the console
syntax :
scanf("format string", argument_list);
-------------------------------------------------------------------------------
-----------------program to print cube of given no---------------------------
---------save this fileas cube.c--and run in compiler------------------------
			or
----------directly run in online compiler by paste this code-----------------

#include<stdio.h>
int main(){
int number;
printf("Enter no : ");
scanf("%d",&number);
printf("cube of number is : %d",number*number*number);
return 0;
}
--------------------------------------------------------------------------------
-------------------program to sum of two number-------------------------------
---------save it as sum.c---and run in compiler-------------------------------
-----------directly copy paste this ocde in online compiler-------------------

#include <stdio.h>
int main(){
int num1;
int num2;
printf("Enter value 1 : ");
scanf("%d",&num1);
printf("Enter value 2 : ");
scanf("%d",&num2);
printf("sum of two number : %d ", num1+num2);
return 0;
}
--------------------------------------------------------------------------------
variables : variable are the memory location
it is used to store the data
its value can be changed and can be reused many times

----------------------rules for defining variables--------------------------
A variable can have alphabets,digits, and underscore.
Variable name can only starts with alphabet and underscore only
no white space is allowed to start variable name
A varibale name must not be reserved words or keywords
	Example : int,float etc.  
	
-----------------Valid Variable names------------------------------------------
int a;
int _am;
int a30;
-------------------------------------------------------------------------------
-------------------invalid variable names--------------------------------------
int 2;
int a b;
int long;
-------------------------------------------------------------------------------
------------------types of variables in c--------------(LEAGS)-----------------
	1.Local variables
	2.Global varibales
	3.Static variables
	4.Automatic variables
	5.External variables
	
1.local Variables :
A variable declared inside the function block is called local variable	
it must decalred start of the block 
it must be initilize before it used 
	Example :	
			#include<stdio.h>
			void function1(){
			int x=10; //local variable
			}
			int main(){
			function();
			return 0;
			}
2.Global variables :
A varibale decalred outside the funtion block is called Global Variables
Any function can change its value for global variable
it is available to all functions
it must be declared at start of the block 
	Example :	
			#include<stdio.h>
			int globle_value=20;	//global Variable
			void function(){
			int local_value=30;	//local Variable
			printf("%d\n",globle_value);
			printf("%d\n",local_value);
			}
			int main(){
			function();
			return 0;
			}
3.Static Variable :
A variable decalred with static keyword is called static variable
static variable is like memory box which hold the value even after close the funtion
means when you call the funtions again you will get the same value as you stored last time 

	Example :
		#include<stdio.h>
		void function(){
		int x=10;	//local variable
		static int y=20; //static variable
		x = x + 1;
		y = y + 1;
		printf("local variable : %d\n" ,x);
		printf(" Static variable : %d\n" ,y);
		}
		int main(){
		    function();
		    return 0;
		}
		
Automatic Variable:		
All variable decalred inside the block, are automatic variables by default
we can declare Automatic variable explicitly using auto keywords
	Example :
		#include<stdio.h>
		void main(){
		int x = 10;		//local variable
		auto int y = 20;	//automatic variable
		printf("%d \n",x);
		printf("%d \n",y);
		return 0;
		}
External Variable : 
It is declared outside of any function
we can refer External Variable as Global Variable because it can be modified and accessed from multiple function within the same source file 
To declare External variable we use extern keyword

	syntax :
		extern int x = 10;	//extern variable
		
	Example :
		#include "myfile.h"
		#include <stdio.h>
		void printvalue(){
		printf("Global variable : %d", global_variable);
		}
-------------------------------------------------------------------------------
----------------------------Data types in C------------------------------------

Data type specifies that type of data stored in variable 
such as : integer, floating,character etc.


			Data type	
			/  /\  \
		       /  /  \  \		1. basic Data types:
		      /  /    \	 \		basic data types are 
		     /  /      \  \		1.integer based
		    /  /        \  \		2.floating point based
	           /  /          \  \		the memory size of
                  /  /            \  \		basic data type change 
                 /  /              \  \		according to 32 bit or
                /  /                \  \	64 bit operating system
               /  /                  \  \
              /  2.Derived 3.Enumeration \
             /       |           |        \		2.Derived Data type:
	1. basic     |		 |	 4.void		These data type give
	     |       |-array     |       |		programmers the ability
	     |-int   |-pointer   |-enum  |-void		to handle hetrogeneous 
	     |-char  |-structure                   	data
	     |-float |-union                  		-Directly modify memory
	     |-double                   		-build complicated data
	     		                       		structure
	                   
--------------------------------------------------------------------------------	        
Enumeration : It is the set of constants
it represent a collection of connected values 
enumeration  data type (enum).

#include<stdio.h>
//Define an Enumeration for day of the week 
enum DayOfWeek{
Monday,
Tuesday,
Wednesday,
Thrusday,
Friday,
Saturday,
Sunday,
};
int main(){
//declare a variable of type enum DayOfWeek
enum DayOfWeek today;
//Assign a value form the enumeration
today = Wednesday;
//Accessing the enumeration value
printf("Today is %d\n",today);
return 0;
}	     
--------------------------------------------------------------------------------		     
Basic data type:
int : it takes 4 bytes and its range is -32768 to 32767 
char : it represent indivisual character value
it holds ASCII or UTF-8 encoding scheme characters
		such as letter
			number
			symbols
			commas     
there are 256 character  represented by single char which takes one bytes of the memory 
character such as 'A','b''5' or '$' are enlclosed in single quotes
		it takes 1 bytes and range is -128 to 127
float :	it takes 4 bytes
double : it takes 8 bytes
long double :it takes 10 bytes
--------------------------Structure data type----------------------------------
structure : it is a drived  data type 
it enable the creation of composite data type
it allows the grouping of any data types under a single name 

#include<stdio.h>
#include<string.h>
//define structure  representing person
struct person{
char name[50];
int age;
float height;
};
int main(){
//Declare a variable of type struct person
struct person person1;
//assign value to structure members
strcpy(person1.name,"goli");
person1.age;30;
person1.height=1.8;
//accessing the structure member
printf("name : %s\n", person1.name);
printf("Age : %d\n", person1.age);
printf("height : %f\n", person1.height);
return 0;
}

Union: it is a drived data type
union anables you to store various data type in the same memory address

--------------------------------------------------------------------------------
In structure : Each member has a seperate memory space
--------------------------------------------------------------------------------
In Union : All member  share a single memory space
--------------------------------------------------------------------------------

#include<stdio.h>
//define a union representing a numeric value 
union NumericValue{
int intValue;
float floatValue;
char stringValue[20];
};
int main(){
//Declare a variable of type union NumericValue
union NumericValue value;
//assign a value to the union
value.intValue=42;
//accessing the union member
printf("integer value ; %d\n", value.intValue);
//assegning a diffrent value to the union
value.floatValue = 3.14;
//Accessing the union members
printf("Float Value : %.2f\n",value.floatValue);
return 0;
}
--------------------------------------------------------------------------------
void data type : The void data type in c language is used to donate the lack of a perticular type. 
1.Function return types
2.Function parameters
3.Pointer

Function Return type :It is a Void return type funtion
it doesn't produce  value
a void function execute a task and ends rather then returning a value

void prinHello(){
printf("Hello world");
}

Function parameters : It is a void return type function
it used to indicate that function accepts no arguments

Example :
	void processinput(void){
	/*Function logic*/
	}
Pointer :
Any address can be stored in a pointer of type void*

Example :
	void* dataPtr;

void data type is helpfull for defining function that don,t accept any arguments

--------------------------------------------------------------------------------
Keyword :
Keyword is a reserved words
you can't use it as variable name or constant name 
There are 32 keywords in C language

A list of 32 keywords in the c language is given below:

auto	break	case	   char	    const	continue   default	do
double	else	enum	   extern   float	for	   goto		if
int	long	register   return   short	signed	   sizeof	static
struct	switch	typedef	   union    unsigned	void	   volatile	while
--------------------------------------------------------------------------------

Identifier : Identifier Represent name in the program
identifier means name of funtions,variable,method,struct and all reserved words 
define by using identifier

types of Identifier
	1.Internal Identifiers (which can't used for External Linkage, internal identifier are --Local variable).
	2.External Identifiers (which is used for External linkage known as External Identifier, External Identifier are Function name, Global Variable).
	
Comments :
comments are used in code to provide the proper information aout line of code one by one 
it is of two type :
	1. Single line comments
	2. Multi-line comments
	
Single line comment : 
Represented by dash //

Example :
	#include<stdio.h>
	int main(){
	//here is variable declare
	int num1 = 12;
	printf("num %d\n",num1);
	return 0;
	}
	
Multi-line comment :
multi-line comment provide slash astrick \*..*\
it can occupy many line of code 

Example :
	#include<stdio.h>
	/*
	Here i will declare variable first then i will get that variable as a output 
	*/
#include<stdio.h>
	int main(){
	//here is variable declare
	int num1 = 12;
	printf("num %d\n",num1);
	return 0;
	}
 
/*comments will make easy to understand the code to each and every developer*/
--------------------------------------------------------------------------------
--------------------------------C format specifier-----------------------------

the format specifier is a string  used in the formatted input and output functions
the format string always starts with  a '%' character

%d or %i -- It is used to print the signed integer value 
	    here it meansthat variable can hold both positive and negetive
	    value 

%u -- It is used to print unsigned integer value 
	here in signed integer means that variable can only hold positive value
	
	Example :
		#include<stdio.h>
		int main(){
		int a = 10;
		int b = -10;
		printf("value of a : %u",a);
		printf("value of b : %u",b);
		return 0;
		}
		
	Output :
		a = 10
		b = 4294967286	
	
%o -- It is used to print the octal unsigned integer 
	where octal integer value always starts with a 0 value
	
	Example :
		#include<stdio.h>
		int main(){
		int a = 0100;
		printf("octal value of a is : %o",a);
		printf("integer value of a is : %d",a);
		return 0;
		}
		
Octal value to integer value 
 example : 100 = 64						
octal means base 8  so 
	(8*8)+(8*0)+(8*0) = 64
integer value to octal value 
divide value by 8 until you get 0 reminder 
100 / 8 = Quotient = 12 and reminder = 4 
12 / 8 = Quotient = 1  and reminder = 4
1 / 8 = Quotient = 0 and reminder = 1
Now the octal no is 144


200 / 8 = Quotient 
	
%x -- it is used to print hexadecimal unsigned interger
	Where the hexadecimal integer value always start with 0x value
	in this alpjhabetical characters areprinted in small letter such as a,b,c etc.

%X -- It is used to print the hexadecimal unsigned integer 
	In  this alphabetical character print in uppercase such as A,B,C etc.	 

%f -- It is used for printing the decimal floating point values.
	By default it print 6 value after '.'.

%e/%E -- It is used for scientific notation 
	It is also known as  mantissa or Exponent
	
%g -- it is used to print decimal floating point value
	It is used the fixed precision
	the value after the decimal in input would be exectly same as value in the output	
	
%p -- It is used to print the address in the hexdecimal form 

%c -- It is used to print unsigned character

%s -- it is used to print the string 

%ld -- it is used to print the long signed integer  value 	
